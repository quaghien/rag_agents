from bot import get_reponse
from agents import trace
import streamlit as st
import asyncio
import os

# Thi·∫øt l·∫≠p API Key
os.environ["OPENAI_API_KEY"] = '###'

st.set_page_config(
    page_title="Chatbot T∆∞ V·∫•n TechLife",
    page_icon="ü§ñ"
)

# L∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i trong session_state
if "messages" not in st.session_state:
    st.session_state["messages"] = []

# H√†m g·ªçi ƒë·∫øn chatbot (async -> sync)
def call_bot(message: str) -> str:
    # H√†m n√†y ch·ªâ ƒë∆°n gi·∫£n g·ªçi h√†m get_reponse
    # v√† tr·∫£ v·ªÅ n·ªôi dung 'final_output' (text) t·ª´ chatbot
    result = asyncio.run(get_reponse(message))
    return result["final_output"]

st.title("ü§ñ Chatbot T∆∞ V·∫•n TechLife")

# H√†m g·ªçi bot
def call_bot(message: str) -> str:
    result = asyncio.run(get_reponse(message))
    return result["final_output"]

# Callback khi b·∫•m n√∫t G·ª≠i
def send_message():
    msg = st.session_state["input_text"].strip()
    if not msg:
        return
    # 1) L∆∞u v√† hi·ªÉn th·ªã user
    st.session_state["messages"].append({"role": "user", "content": msg})
    # 2) G·ªçi bot v√† l∆∞u
    bot_resp = call_bot(msg)
    st.session_state["messages"].append({"role": "assistant", "content": bot_resp})
    # 3) Clear input
    st.session_state["input_text"] = ""

# Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
for chat in st.session_state.get("messages", []):
    with st.chat_message(chat["role"]):
        st.write(chat["content"])

# T·∫°o widget v√† g·∫Øn callback
st.text_input("Nh·∫≠p tin nh·∫Øn:", key="input_text")
st.button("G·ª≠i", on_click=send_message, type="primary")